package layer.database.entity;

// Generated 22-nov-2016 14.40.56 by Hibernate Tools 3.4.0.CR1

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;

// TODO: Auto-generated Javadoc
/**
 * NonFunctionalReq generated by hbm2java.
 */
@Entity
@Table(name = "non_functional_req", catalog = "musa_db")
public class NonFunctionalReq implements java.io.Serializable {

	private static final long serialVersionUID = 1L;

	/** The id non functional req. */
	private Integer idNonFunctionalReq;

	/** The specification. */
	private Specification specification;

	/** The name. */
	private String name;

	/** The value. */
	private String value;

	/** The description. */
	private String description;

	/** The current state. */
	private String currentState;

	/**
	 * Instantiates a new non functional req.
	 */
	public NonFunctionalReq() {
	}

	/**
	 * Instantiates a new non functional req.
	 *
	 * @param specification the specification
	 * @param name the name
	 * @param value the value
	 * @param description the description
	 * @param currentState the current state
	 */
	public NonFunctionalReq(Specification specification, String name,
			String value, String description, String currentState) {
		this.specification = specification;
		this.name = name;
		this.value = value;
		this.description = description;
		this.currentState = currentState;
	}

	/**
	 * Gets the id non functional req.
	 *
	 * @return the id non functional req
	 */
	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "idNonFunctional_Req", unique = true, nullable = false)
	public Integer getIdNonFunctionalReq() {
		return this.idNonFunctionalReq;
	}

	/**
	 * Sets the id non functional req.
	 *
	 * @param idNonFunctionalReq the new id non functional req
	 */
	public void setIdNonFunctionalReq(Integer idNonFunctionalReq) {
		this.idNonFunctionalReq = idNonFunctionalReq;
	}

	/**
	 * Gets the specification.
	 *
	 * @return the specification
	 */
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "idSpecification")
	public Specification getSpecification() {
		return this.specification;
	}

	/**
	 * Sets the specification.
	 *
	 * @param specification the new specification
	 */
	public void setSpecification(Specification specification) {
		this.specification = specification;
	}

	/**
	 * Gets the name.
	 *
	 * @return the name
	 */
	@Column(name = "name", length = 45)
	public String getName() {
		return this.name;
	}

	/**
	 * Sets the name.
	 *
	 * @param name the new name
	 */
	public void setName(String name) {
		this.name = name;
	}

	/**
	 * Gets the value.
	 *
	 * @return the value
	 */
	@Column(name = "value", length = 45)
	public String getValue() {
		return this.value;
	}

	/**
	 * Sets the value.
	 *
	 * @param value the new value
	 */
	public void setValue(String value) {
		this.value = value;
	}

	/**
	 * Gets the description.
	 *
	 * @return the description
	 */
	@Column(name = "description", length = 45)
	public String getDescription() {
		return this.description;
	}

	/**
	 * Sets the description.
	 *
	 * @param description the new description
	 */
	public void setDescription(String description) {
		this.description = description;
	}

	/**
	 * Gets the current state.
	 *
	 * @return the current state
	 */
	@Column(name = "current_state", length = 45)
	public String getCurrentState() {
		return this.currentState;
	}

	/**
	 * Sets the current state.
	 *
	 * @param currentState the new current state
	 */
	public void setCurrentState(String currentState) {
		this.currentState = currentState;
	}

}
