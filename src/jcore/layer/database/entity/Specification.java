package layer.database.entity;

import static javax.persistence.GenerationType.IDENTITY;

// Generated 22-nov-2016 14.40.56 by Hibernate Tools 3.4.0.CR1

import java.util.HashSet;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;

// TODO: Auto-generated Javadoc
/**
 * Specification generated by hbm2java.
 */
@Entity
@Table(name = "specification", catalog = "musa_db")
public class Specification implements java.io.Serializable {

	private static final long serialVersionUID = 1L;

	/** The id specification. */
	private Integer idSpecification;

	/** The domain. */
	private Domain domain;

	/** The descriptions. */
	private String descriptions;

	/** The state. */
	private String state;

	/** The user. */
	private String user;

	/** The functional reqs. */
	private Set<FunctionalReq> functionalReqs = new HashSet<FunctionalReq>(0);

	/** The non functional reqs. */
	private Set<NonFunctionalReq> nonFunctionalReqs = new HashSet<NonFunctionalReq>(0);

	/**
	 * Instantiates a new specification.
	 */
	public Specification() {
	}

	/**
	 * Instantiates a new specification.
	 *
	 * @param domain
	 *            the domain
	 * @param descriptions
	 *            the descriptions
	 * @param state
	 *            the state
	 * @param user
	 *            the user
	 * @param functionalReqs
	 *            the functional reqs
	 * @param nonFunctionalReqs
	 *            the non functional reqs
	 */
	public Specification(Domain domain, String descriptions, String state, String user,
			Set<FunctionalReq> functionalReqs, Set<NonFunctionalReq> nonFunctionalReqs) {
		this.domain = domain;
		this.descriptions = descriptions;
		this.state = state;
		this.user = user;
		this.functionalReqs = functionalReqs;
		this.nonFunctionalReqs = nonFunctionalReqs;
	}

	/**
	 * Gets the id specification.
	 *
	 * @return the id specification
	 */
	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "idSpecification", unique = true, nullable = false)
	public Integer getIdSpecification() {
		return this.idSpecification;
	}

	/**
	 * Sets the id specification.
	 *
	 * @param idSpecification
	 *            the new id specification
	 */
	public void setIdSpecification(Integer idSpecification) {
		this.idSpecification = idSpecification;
	}

	/**
	 * Gets the domain.
	 *
	 * @return the domain
	 */
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "idDomain")
	public Domain getDomain() {
		return this.domain;
	}

	/**
	 * Sets the domain.
	 *
	 * @param domain
	 *            the new domain
	 */
	public void setDomain(Domain domain) {
		this.domain = domain;
	}

	/**
	 * Gets the descriptions.
	 *
	 * @return the descriptions
	 */
	@Column(name = "descriptions", length = 45)
	public String getDescriptions() {
		return this.descriptions;
	}

	/**
	 * Sets the descriptions.
	 *
	 * @param descriptions
	 *            the new descriptions
	 */
	public void setDescriptions(String descriptions) {
		this.descriptions = descriptions;
	}

	/**
	 * Gets the state.
	 *
	 * @return the state
	 */
	@Column(name = "state", length = 45)
	public String getState() {
		return this.state;
	}

	/**
	 * Sets the state.
	 *
	 * @param state
	 *            the new state
	 */
	public void setState(String state) {
		this.state = state;
	}

	/**
	 * Gets the user.
	 *
	 * @return the user
	 */
	@Column(name = "user", length = 45)
	public String getUser() {
		return this.user;
	}

	/**
	 * Sets the user.
	 *
	 * @param user
	 *            the new user
	 */
	public void setUser(String user) {
		this.user = user;
	}

	/**
	 * Gets the functional reqs.
	 *
	 * @return the functional reqs
	 */
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "specification")
	public Set<FunctionalReq> getFunctionalReqs() {
		return this.functionalReqs;
	}

	/**
	 * Sets the functional reqs.
	 *
	 * @param functionalReqs
	 *            the new functional reqs
	 */
	public void setFunctionalReqs(Set<FunctionalReq> functionalReqs) {
		this.functionalReqs = functionalReqs;
	}

	/**
	 * Gets the non functional reqs.
	 *
	 * @return the non functional reqs
	 */
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "specification")
	public Set<NonFunctionalReq> getNonFunctionalReqs() {
		return this.nonFunctionalReqs;
	}

	/**
	 * Sets the non functional reqs.
	 *
	 * @param nonFunctionalReqs
	 *            the new non functional reqs
	 */
	public void setNonFunctionalReqs(Set<NonFunctionalReq> nonFunctionalReqs) {
		this.nonFunctionalReqs = nonFunctionalReqs;
	}

}
